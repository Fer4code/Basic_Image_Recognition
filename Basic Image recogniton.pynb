{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "fZ7suM2_Fdto"
      },
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HwCzuM37FqkM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a65214ae-2999-42d2-a596-8b1eaedd0fb6"
      },
      "source": [
        "#Load the fashion mis pre shuffled tran data and test data from tf.keras.datasets\n",
        "\n",
        "(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.fashion_mnist.load_data()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "29515/29515 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26421880/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "5148/5148 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4422102/4422102 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XYaDDDX5GQFC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "788522e3-57b5-41fe-f67a-9d530e45dbd9"
      },
      "source": [
        "#Explore it \n",
        "\n",
        "print(\"train_images shape:\", train_images.shape, \"train_labels shape:\", train_labels.shape)\n",
        "print(\"test_images shape:\", test_images.shape, \"test_labels shape:\", test_labels.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train_images shape: (60000, 28, 28) train_labels shape: (60000,)\n",
            "test_images shape: (10000, 28, 28) test_labels shape: (10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3SvaqMb5HbIF"
      },
      "source": [
        "#Convert the dat to float 32\n",
        "train_images = train_images.astype('float32') / 255\n",
        "test_images = test_images.astype('float32') / 255"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QAYnHpf8Hxum"
      },
      "source": [
        "#Reshape input data from (28, 28) to (28, 28, 1)\n",
        "train_images = train_images.reshape(train_images.shape[0], 28, 28, 1)\n",
        "test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0kaZoXpCIT4O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7b3f28d-2d2a-4060-97a0-760b847af43f"
      },
      "source": [
        "#Take a look the dataset shape after reshape\n",
        "print(\"train_images shape:\", train_images.shape, \"train_labels:\", train_labels.shape)\n",
        "print(\"test_images shape:\", test_images.shape, \"test_labels:\", test_labels.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train_images shape: (60000, 28, 28, 1) train_labels: (60000,)\n",
            "test_images shape: (10000, 28, 28, 1) test_labels: (10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1R8Ywv5BI1o3"
      },
      "source": [
        "# One-hot encode the labels \n",
        "train_labels = tf.keras.utils.to_categorical(train_labels, 10)\n",
        "test_labels = tf.keras.utils.to_categorical(test_labels, 10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o3OJ-l9EJIWk"
      },
      "source": [
        "#Define a Cnn with keras sequential model \n",
        "\n",
        "def create_model():\n",
        "\n",
        "  #Define the model arquitecture\n",
        "  model = tf.keras.models.Sequential([\n",
        "      #Must define the input shape in the first layer of the neural network\n",
        "      tf.keras.layers.Conv2D(\n",
        "          filters=32, \n",
        "          kernel_size=3, \n",
        "          padding='same', \n",
        "          activation='relu', \n",
        "          input_shape=(28,28,1)),\n",
        "\n",
        "          tf.keras.layers.MaxPooling2D(pool_size=2),\n",
        "          tf.keras.layers.Dropout(0.3),\n",
        "\n",
        "          tf.keras.layers.Conv2D(\n",
        "          filters=64, \n",
        "          kernel_size=3, \n",
        "          padding='same', \n",
        "          activation='relu'),\n",
        "\n",
        "          tf.keras.layers.MaxPooling2D(pool_size=2),\n",
        "          tf.keras.layers.Dropout(0.3),\n",
        "\n",
        "          tf.keras.layers.Flatten(),\n",
        "          tf.keras.layers.Dense(10, activation='softmax')\n",
        "  ])\n",
        "\n",
        "  #Compile the model\n",
        "\n",
        "  model.compile(loss=tf.keras.losses.categorical_crossentropy, \n",
        "                optimizer=tf.keras.optimizers.Adam(),\n",
        "                metrics=['accuracy'])\n",
        "  \n",
        "  return model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XsCCGPoiL8Eg"
      },
      "source": [
        "#create model \n",
        "\n",
        "model = create_model()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o2cWWvPpMCnF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0dca1a4d-7201-447f-8803-c52f229679c1"
      },
      "source": [
        "#Inspect the Architecture\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 28, 28, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 14, 14, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 14, 14, 32)        0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 14, 14, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 7, 7, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 7, 7, 64)          0         \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 3136)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 10)                31370     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 50,186\n",
            "Trainable params: 50,186\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V4a6IYK-MFHE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64982f22-40e6-40e2-eba4-f769f51f923a"
      },
      "source": [
        "%%time\n",
        "model.fit(train_images,\n",
        "          train_labels,\n",
        "          batch_size=64,\n",
        "          epochs=5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "938/938 [==============================] - 81s 86ms/step - loss: 0.5343 - accuracy: 0.8055\n",
            "Epoch 2/5\n",
            "938/938 [==============================] - 79s 84ms/step - loss: 0.3675 - accuracy: 0.8690\n",
            "Epoch 3/5\n",
            "938/938 [==============================] - 79s 85ms/step - loss: 0.3273 - accuracy: 0.8841\n",
            "Epoch 4/5\n",
            "938/938 [==============================] - 78s 83ms/step - loss: 0.3013 - accuracy: 0.8936\n",
            "Epoch 5/5\n",
            "938/938 [==============================] - 78s 83ms/step - loss: 0.2854 - accuracy: 0.8989\n",
            "CPU times: user 11min 14s, sys: 16.9 s, total: 11min 31s\n",
            "Wall time: 6min 34s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fa60fa785b0>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F6-c8oFMMfGN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "d896e2b3-27d9-4f1e-fe7c-6771c897897e"
      },
      "source": [
        "model.evaluate(test_images, test_labels, verbose=2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 - 3s - loss: 0.2768 - accuracy: 0.9044\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.27683064341545105, 0.9043999910354614]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    }
  ]
}